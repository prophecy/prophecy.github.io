{"version":3,"sources":["resources/the_witcher_logo.png","components/Header.jsx","components/Footer.jsx","components/Description.jsx","components/Tab.jsx","components/Tabs.jsx","components/LoginForm.jsx","components/LoginFormLDAP.jsx","components/LoginFormStandard.jsx","components/LoginBox.jsx","components/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","className","src","logo","alt","Component","Footer","href","Description","Tab","onClick","props","label","this","activeTab","Tabs","onClickTabItem","tab","setState","children","map","child","key","LoginForm","isShowForgotPassword","usernameInputLabel","passwordInputLabel","forgetPasswordLink","Fragment","htmlFor","id","type","name","value","LoginFormLDAP","LoginFormStandard","LoginBox","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84615940.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/the_witcher_logo.99b2a6e5.png\";","import React, { Component } from \"react\";\nimport logo from \"../resources/the_witcher_logo.png\";\n\nclass Header extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"header\">\n        <img className=\"logo\" src={logo} alt=\"logo\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"footer\">\n        <a href=\"/explore\">Explore</a>\n        <a href=\"/help\">Help</a>\n        <a href=\"https://about.gitlab.com/\">About GitLab</a>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nclass Description extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"description\">\n        <h1>Open source software to collaborate on code</h1>\n        <p>\n          Manage Git repositories with fine-grained access controls that keep\n          your code secure. Perform code reviews and enhance collaboration with\n          merge requests. Each project can also have an issue tracker and a\n          wiki.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Description;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Tab extends Component {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label },\n    } = this;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" tab-list-active\";\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {label}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab) => {\n    this.setState({ activeTab: tab });\n  };\n\n  render() {\n    const {\n      onClickTabItem,\n      props: { children },\n      state: { activeTab },\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map((child) => {\n            const { label } = child.props;\n\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTabItem}\n              />\n            );\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map((child) => {\n            if (child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tabs;\n","import React, { Component } from \"react\";\n\nclass LoginForm extends Component {\n  state = {\n    isShowForgotPassword: false,\n    usernameInputLabel: \"\",\n    passwordInputLabel: \"\",\n  };\n\n  render() {\n    let forgetPasswordLink;\n\n    if (this.state.isShowForgotPassword)\n      forgetPasswordLink = (\n        <React.Fragment>\n          <a href=\"http://google.com\">Forgot your password?</a>\n          <br />\n        </React.Fragment>\n      );\n\n    return (\n      <div className=\"login-form\">\n        <label htmlFor=\"username-input\" className=\"login-element\">\n          {this.state.usernameInputLabel}\n        </label>\n        <input\n          id=\"username-input\"\n          className=\"input-text login-element\"\n          type=\"text\"\n          name=\"name\"\n        />\n        <label htmlFor=\"password-input\" className=\"login-element\">\n          {this.state.passwordInputLabel}\n        </label>\n        <input\n          id=\"password-input\"\n          className=\"input-text login-element\"\n          type=\"password\"\n          name=\"password\"\n        />\n        <input type=\"checkbox\" id=\"remember-me\" />\n        <label htmlFor=\"checkbox\">Remember me</label>\n        {forgetPasswordLink}\n        <input\n          type=\"submit\"\n          value=\"Sign in\"\n          id=\"sign-in-submit\"\n          className=\"input input-submit login-element\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import LoginForm from \"./LoginForm\";\n\nclass LoginFormLDAP extends LoginForm {\n  constructor(props) {\n    super(props);\n\n    this.state.isShowForgotPassword = false;\n    this.state.usernameInputLabel = \"LDAP Username\";\n    this.state.passwordInputLabel = \"Password\";\n  }\n}\n\nexport default LoginFormLDAP;\n","import LoginForm from \"./LoginForm\";\n\nclass LoginFormStandard extends LoginForm {\n  constructor(props) {\n    super(props);\n\n    this.state.isShowForgotPassword = true;\n    this.state.usernameInputLabel = \"Username or email\";\n    this.state.passwordInputLabel = \"Password\";\n  }\n}\n\nexport default LoginFormStandard;\n","import React, { Component } from \"react\";\n\nimport Tabs from \"./Tabs\";\nimport LoginFormLDAP from \"./LoginFormLDAP\";\nimport LoginFormStandard from \"./LoginFormStandard\";\n\nclass LoginBox extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"login-box\">\n        <div>\n          <Tabs>\n            <div label=\"LDAP\">\n              <LoginFormLDAP />\n            </div>\n            <div label=\"Standard\">\n              <LoginFormStandard />\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginBox;\n","import React, { Component } from \"react\";\n\nimport Description from \"./Description\";\nimport LoginBox from \"./LoginBox\";\nimport Footer from \"./Footer\";\n\nclass Container extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"title\">\n            <h1>GitLab Community Edition</h1>\n          </div>\n          <div className=\"inner-content\">\n            <Description />\n            <LoginBox />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Container;\n","import React from \"react\";\n\nimport \"./styles/styles.css\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Container from \"./components/Container\";\n\nfunction App() {\n  return (\n    <div className=\"root\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}